package Device::IRToy::Protocol::Panasonic {
    use 5.016;
    use warnings;
    
    use Device::IRToy::Utils;
    use List::Util qw(min);
    
    sub encode {
        my ( $class,$data ) = @_;
        
        return
            unless defined $data
            && ref $data eq 'ARRAY';
        
#          85,
#          90,
#          243,
#          8,
#          144,
#          132,
#          68,
#          200,
#          16,
#          1,
#          0,
#          15,
#          141
#
#          3669,
#          1963,
#          384,
#          555,
#          341,
#          1472,
#          384,
#          555,
#          363,
#          1493,
#          384,
#          555,
#          341,
#          1515,
#          384,
#          555,
#          341,
#          1472,
#          384,
#          555,
#          363,
#          1493,
#          384,
#          533,
#          363,
#          1493,
#          384,
#          1472,
#          384,
#          533,
#          405,
#          1493,
#          384,
#          533,
#          384,
#          1493,
#          384,
#          1472,
#          384,
#          1472,
#          384,
#          1472,
#          384,
#          533,
#          384,
#          533,
#          384,
#          1515,
#          384,
#          1472,
#          384,
#          533,
#          384,
#          533,
#          384,
#          533,
#          384,
#          533,
#          405,
#          1472,
#          405,
#          512,
#          405,
#          512,
#          405,
#          512,
#          405,
#          1493,
#          405,
#          512,
#          405,
#          512,
#          405,
#          1451,
#          427,
#          491,
#          405,
#          512,
#          405,
#          512,
#          405,
#          512,
#          384,
#          1472,
#          405,
#          533,
#          405,
#          491,
#          427,
#          491,
#          427,
#          512,
#          427,
#          1429,
#          448,
#          491,
#          384,
#          533,
#          384,
#          533,
#          384,
#          1451,
#          427,
#          512,
#          384,
#          533,
#          384,
#          533,
#          384,
#          1451,
#          427,
#          512,
#          427,
#          533,
#          384,
#          1451,
#          427,
#          1429,
#          427,
#          512,
#          384,
#          533,
#          384,
#          1451,
#          427,
#          512,
#          384,
#          533,
#          384,
#          555,
#          363,
#          533,
#          384,
#          555,
#          405,
#          533,
#          384,
#          1451,
#          427,
#          512,
#          384,
#          533,
#          384,
#          533,
#          384,
#          533,
#          384,
#          533,
#          384,
#          533,
#          384,
#          533,
#          384,
#          533,
#          384,
#          533,
#          384,
#          533,
#          384,
#          555,
#          384,
#          1451,
#          427,
#          512,
#          384,
#          533,
#          384,
#          555,
#          363,
#          533,
#          384,
#          533,
#          384,
#          533,
#          384,
#          533,
#          384,
#          533,
#          384,
#          533,
#          384,
#          555,
#          363,
#          555,
#          363,
#          555,
#          384,
#          1451,
#          427,
#          1429,
#          427,
#          1429,
#          427,
#          1429,
#          427,
#          1429,
#          427,
#          491,
#          427,
#          491,
#          427,
#          512,
#          427,
#          1429,
#          427,
#          1429,
#          427,
#          491,
#          427,
#          1429,
#          405
    }
    
    sub decode {
        my ( $class,$data ) = @_;
        
        return
            unless defined $data
            && ref $data eq 'ARRAY';
        
        my $min     = min(@$data);
        my $dw      = 0;
        
        if ( !Device::IRToy::Utils::check_fuzzy(  $data->[0], 3500, 1000 ) ) {
            msg('WARN',"Probably not Panasonic! First period:%%.4fµs 3500µs(+/-1000) expected");
            return;
        }
        
        if ( !Device::IRToy::Utils::check_fuzzy( $data->[1], 1500, 500 ) ) {
            msg('WARN',"Probably not Panasonic! Second period:%%.4fµs 1500µs(+/-500) expected");
            return;
        }
        
        my ($j,$i);
        my @result = ();
        
        my $bytes = ( $#{$data} - 2 ) / 16;
        for ($i = 0; $i < ( $#{$data} - 2 ) / 16; $i++ ) {
            my $bit = 7;
            $result[$i] = 0;
            for ( $j = 0; $j < 16; $j += 2 ) {
                $result[$i] |= 1 << ($bit) 
                    if $data->[3+16*$i+$j] > ( $min * 2 );
                $bit--;
            }
        }
        
        my $check = 2+16*($i-1)+$j;
        if ( $check != $#{$data} ) {
            msg('WARN',"Stop bit missing: %i != %i",$check,$#{$data});
        }
        
        use Data::Dumper;
        {
          local $Data::Dumper::Maxdepth = 2;
          warn __FILE__.':line'.__LINE__.':'.Dumper($data,\@result);
        }
        
        return \@result;
    }
}

1;
